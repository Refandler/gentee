include {
   "gena.g"   
}

method vComp.GetCompInclude ( hash h )
{
   uint descr as cm.GetCompDescr( this.TypeId )
   if &descr 
   {
      h.create( descr.File )
   }   
   uint i      
   fornum i=0, *this.Comps
   {
      if this.Comps[i]->vComp.p_designing 
      {         
         this.Comps[i]->vComp.GetCompInclude( h )
      }
   }
}


method str myform.GetInclude <result> ()
{
   hash h
   .edform->vComp.GetCompInclude( h )   
   result@"include {\n\t\"app.g\"\n"   
   h.del( "" )
   foreach key, h.keys
   {
      //print( key + "\n" )
      result@"\t\""@key@".g\"\n"
   }   
 /*  result = "include { 
$\"btn.g\"
$\"panel.g\"
$\"edit.g\"
$\"menu.g\"
$\"scrollbox.g\"
$\"tab.g\"
"*/
}

method str vComp.GetListComps <result>
{  
   uint i   
   fornum i=0, *this.Comps
   {      
      if this.Comps[i]->vComp.p_designing 
      {
         result@"\t"@this.Comps[i]->vComp.TypeName@"\t"@this.Comps[i]->vComp.Name@"\n"
         result@this.Comps[i]->vComp.GetListComps()
      }
   }
}

method str myform.GetForm <result> ()
{
   result = "type v\(.edform->vComp.Name) <inherit=vForm> {
\(.edform->vComp.GetListComps()) "
}

method myform.checkgffile
{
   //print( "PREPRECHECK  \n" )
   
   if .flgsaved && !.flggfchanged
   {
      file f
      filetime   ft
      //print( "PRECHECK  \n" )
      if f.open( .filename + ".gf", 1/*$OP_READONLY*/ )
      {
         f.gettime( ft ) 
         f.close()
         //print( "CHECK  \n" )
         if ft != .ftgf
         {
            //print( "CHECK READ \n" )
            .gffile.read( .filename + ".gf" )
            .ftgf = ft
         }
      }
   }
}

method myform.GFSetHeader( str src )
{    
   
   //print( "set1\n" )
   //src.read( /*this.srcfile + ".gf"*/"\(.edform->vComp.Name).gf" )   
   if !replcode( src, "include", this.GetInclude() ) : print( "ERROR\n" )   
   if !replcode( src, "form", this.GetForm() ) : print( "ERROR\n" )
   //if !replcode( src, "includeinit", "include { $\"\(.filename).gi" ) : print( "ERROR\n" )   
   //print( "set10\n" )
   //src.write( /*this.srcfile + ".gf"*/"\(.edform->vComp.Name).gf" )
}

method myform.GFSetHeaderf()
{   
   .checkgffile()
   .flgchanged = 1
   .flggfchanged = 1  
   //str src 
   //src.read( /*this.srcfile + ".gf"*/"\(.edform->vComp.Name).gf"  )
   this.GFSetHeader( .gffile )
   
   //src.write( /*this.srcfile + ".gf"*/"\(.edform->vComp.Name).gf"  )
}  

method myform.GFSetInit( str src ) 
{
   delcode( src, "includeinit" )
   str fname
   .filename.fgetparts( 0->str, fname, 0->str )
   inscode( src, "includeinit", "include { $\"\(fname).gi\" \l}", "" )
   /*if !replcode( src, "includeinit", "includeinit", "include { $\"\(.filename).gi\" \l}" )
   {
      inscode( src, "includeinit", "include { $\"\(.filename).gi\" \l}", "" )
   }*/
}

method myform.GFSetMethod( str src, str oldname newname typename )
{  
   str labo = "method \( oldname ) \( typename )"
   str labn = "method \( newname ) \( typename )"
   str code = "method uint v\(.edform->vComp.Name).\(newname) <alias=\(.edform->vComp.Name)_\(newname)>( \(typename) evn )"      
   if !replcode( src, labo, labn, code )  
   {
      inscode( src, labn, code, "{\l\lreturn 0\l}" )
   }
}

method myform.GFSetMethodf( str oldname newname typename )
{
   //str src
   //src.read( /*this.srcfile + ".gf"*/"\(.edform->vComp.Name).gf" )
   .checkgffile() 
   .flgchanged = 1
   .flggfchanged = 1  
   this.GFSetMethod( .gffile, oldname, newname, typename )
   //src.write( /*this.srcfile + ".gf"*/"\(.edform->vComp.Name).gf" )
}

/*method myform.GFSetAll
{
   str src
   src.read( this.srcfile + ".gf" )   
   
   this.GFSetHeader( src )
   fornum 
   {
      setmethod( ) 
   }
   src.write( this.srcfile + ".gf" )
}
 */
method myform.GFSetNew
{
 //  str src
   .gffile = "/*	
 //!GFG è //!\\GFG  are commentary attributes generated by 
 the Gentee form editor. You should neither delete them 
 nor make any changes into the source code from the beginning 
 of the commentary attribute //!GFG to its end //!\\GFG
*/
"
   inscode( .gffile, "include", this.GetInclude(), "\l}" )
   inscode( .gffile, "form", this.GetForm(), "\l}" )
   //inscode( .gffile, "includeinit", "include { $\"\(.filename).gi\" \l}", "" )
   //src.write( /*this.srcfile + ".gf"*/"\(.filename).gf" )   
}

method ustr ustr.doubleslash()
{
   uint off
   while ( off = this.findch( off, '\' ) ) < *this
   {
      this.insert( off, "\\".ustr() )
      off += 2
   }
   return this
}

method str str.doubleslash()
{
   uint off
   while ( off = this.findch( off, '\' ) ) < *this
   { 
      this.insert( off, "\\".ustr() )
      off += 2
   }
   return this
}

method str vComp.GetListProps <result>( str ownername, str formname, str indent/*, str aftercreate*//*, myform mf*/ ) 
{  
   //uint x as inspm->vcompman         
   uint i      
   str afterchild
   
   if *ownername
   {
      result@indent@"comp as this."@this.Name@"\l" 
      result@indent@"comp.Owner = "@ownername@"\l"
   }
   else : result@indent@"comp as this\l" 
   result@indent@"with comp\l"@indent@"{\l"
   uint descr as cm.GetCompDescr( this.TypeId )
   if &descr 
   {        
      foreach prop, descr.Props
      {  
         str curprop
         //if !( prop.D & $PI_DEFVAL )
         { 
            curprop@indent@"\t."@prop.PropName
            if prop.AddrGet
            {                  
               if prop.PropType == ustr 
               {
                  curprop@"=ustmp.fromutf8(\""@(prop.AddrGet->func( this, "" ))->ustr.doubleslash().toutf8("")@"\")"         
               }
               elif prop.PropType == uint || prop.PropType == int
               {         
                  int z = (prop.AddrGet->func( this ))
                  if prop.Vals
                  {
                     curprop@"=$"@prop.GetEnumName(z)
                  }               
                  else
                  {                  
                     curprop@"=\(z)"
                  }
               }
               elif prop.PropType == str
               {
                  curprop@"=\""@(prop.AddrGet->func( this, "" ))->str.doubleslash()@"\"" 
               }
               elif prop.PropType == vComp || type_isinherit( prop.PropType, vComp )
               {
                  uint link as prop.AddrGet->func( this )->vComp
                  if &link
                  {
                     uint checklink as App.FindComp( link )                  
                     if &checklink && checklink.TypeIs( prop.PropType )
                     {
                        curprop@"=."@link.Name
                     }
                  }
                  else
                  {
                     continue
                  }
               }
            }
            curprop@"\l"
            //print( "\(prop.PropName) \(prop.PropFlags)\n" )
            if prop.PropFlags & $PROP_LOADAFTERCHILD
            {  
               afterchild@curprop               
            }
            /*elif prop.PropFlags & $PROP_LOADAFTERCREATE
            {               
               aftercreate@this.Name@curprop
            } */
            else 
            {
               result@curprop  
            }
         }   
                           
      }
      
      foreach event, descr.Events
      {         
         
         str meth = event.GetVal( this ) 
         if *meth
         {
            result@indent@"\t.\(event.EventName).Set( this, \(formname)_\(meth) )\l"
         }
         /*print( "eventname = \(event.EventName)\n" )
         
         item.Value = 
            
         item.Flags |= $PI_LIST*/ 
      }      
      if *this.Comps
      {
         result@"\l"@indent@"\tuint comp\l"
         fornum i=0, *this.Comps
         {          
            if this.Comps[i]->vComp.p_designing 
            {  
               result@this.Comps[i]->vComp.GetListProps(?(*ownername,"this."@this.Name, "this" ), formname, indent + "\t"/*, aftercreate*//*, mf*/)
            }      
         }
      }
      result@afterchild
      result@indent@"}\l"
   }

   //uint c as cm.FindCOmp( this.typeid )
   //if &c 
   {
      //fornum i=0, *c.props
      {    
         /*if c.props[i].getval(this) != c.props[i].defval
         {       
            if c.props[i].addrget
            {
               result@"ctrl."@c.props[i].name@"="
               //print( c.props[i].name+"\n" )             
               if c.props[i].typeid == str 
               {
                  result@(c.props[i].addrget->func( this,"" ))->str.quoted()     
               }
               elif c.props[i].typeid == uint || c.props[i].typeid == int
               {
                  str r
                  int2str( r, "0x%X", (c.props[i].addrget->func( this ))) 
                  //print( r+"\n" )
                  result@r     
               }
               result@"\l"
            }
         }*/
      }
      /*uint arev as this.des1->arr of uint
      uint desc
      fornum i=0, *c.events
      {    
         if arev[i]
         {  
            desc as mf.evlist[mf.finddesc( arev[i] )] 
            result@"ctrl."@c.events[i].name@".set(this,\""@desc.name@"\")\l"
         }
      }*/
   }
}

method vComp.Save( gtitem gi, uint level )
{
   str slevel
   uint i
   fornum i, level
   {
      slevel@"  "
   } 
   gi.set( "TypeName", this.TypeName )
   uint descr as cm.GetCompDescr( this.TypeId )
   if &descr 
   {  
      uint gp as gi.appendchild( "Properties" )
      uint gpa as gi.appendchild( "PropertiesAfter" )  
      uint ge as gi.appendchild( "Events" )  
      uint i
      ustr val
      fornum i, *descr.Props
      {         
         uint prop as descr.Props[i]
         val = prop.GetVal( this )                   
         if val != prop.DefVal
         {
            if prop.PropFlags & $PROP_LOADAFTERCHILD
            {
               val.toutf8(gpa.appendchild( prop.PropName ).value)
            }
/*            elif prop.PropFlags & $PROP_LOADAFTERCREATE
            {
               val.toutf8(gpac.appendchild( prop.PropName ).value)
            }*/
            else
            {
               val.toutf8(gp.appendchild( prop.PropName ).value)
            } 
         }                 
      }            
      fornum i = 0, *descr.Events
      {         
         uint event as descr.Events[i]
         val = event.GetVal( this )
         val.toutf8(ge.appendchild( event.EventName ).value)
      }      
   }
   
   uint gc as gi.appendchild( "Children" )
   foreach comp, .Comps
   {
      comp as vComp    
      if comp.p_designing
      {  
         comp.Save( gc.appendchild(""), level + 1 )
      }
   }
}
method myform.GFSave( uint flgsaveas )
{   
   if !.flggfchanged 
   { 
      .checkgffile()
   }
   if !.flgchanged /*&& !flgsaveas*/
   {       
      return
   }   
   if !.flgsaved || flgsaveas
   {  
      .dlgOpen.FileName = ?( *.filename, .filename.ustr(), .edform->vForm.Name.ustr())
      .dlgOpen.DefExt = ".gf".ustr()     
      .dlgOpen.Filters[0]= "Gentee form (*.gf)\\*.gf".ustr()
      if !.dlgOpen.ShowSaveFile()
      {
         return
      }
      str dir, fname
      this.dlgOpen.FileName.str().fgetparts( dir, fname, 0->str )
      .filename = dir + "\\" + fname 
   }
   //print( "s10\n" )       
   
   gt g
   g.utf8 = 1
   //print( "s11\n" )
   .edform->vForm.Save( g.root().appendchild(""), 0 )
   ///print( "s12\n" )      
   str stemp
   gtsave gts
   gts.offstep = 1
   gts.inside = 1
   gts.flags = $GTS_INLINE
   //gts.endname = 1
   //print( "s13\n" )   
   g.root().save( stemp, gts )
   //print( "s14\n" )
   stemp.write( .filename + ".frm" )
   //print( "s15\n" )     
 
   str fname
   .filename.fgetparts( 0->str, fname, 0->str )
   //str aftercreate
   str r = .edform->vComp.GetListProps( "", .edform->vComp.Name, "\t"/*, aftercreate*/ )
   //\(aftercreate)
   r ="method v\(.edform->vComp.Name) v\(.edform->vComp.Name).mLoad <alias=v\(.edform->vComp.Name)_mLoad>( )   
{   
//\tthis->vForm.mCreateWin()
\tustr ustmp
\tuint comp
"@r@"
\treturn this
}

method v\(.edform->vComp.Name) v\(.edform->vComp.Name).init( )
{
   this.pTypeId = v\(.edform->vComp.Name)         
   return this
}
func init_v\(.edform->vComp.Name) <entry>()
{
   regcomp( v\(.edform->vComp.Name), \"v\(.edform->vComp.Name)\", vForm, $vForm_last,
      %{ %{$mLoad,     v\(.edform->vComp.Name)_mLoad}},
      0->collection )
      
}
"
   
   r.write( "\(.filename).gi" )
   
   "#!gentee.exe -s -p vis \"%1\"
define
{
	DESIGNING = 0
   COMP = 0   
}
include {   
   $\"\(fname).gf\"
   //$\"\(fname).gi\"
}
global {
   v\(.edform->vComp.Name) \(.edform->vComp.Name)
}

func run<main>
{
   App.Load()
   \(.edform->vComp.Name).Owner = App   
   App.Run()
}
".write( "\(.filename).g" )
   //.checkgffile()
   .GFSetInit( .gffile )   
   .gffile.write( "\(.filename).gf" )   
   .flgchanged = 0
   file f
   if f.open( .filename + ".gf", 1/*$OP_READONLY*/ )
   {   
      f.gettime( .ftgf ) 
      f.close()      
      .flgsaved = 1
      .flggfchanged = 0
   }      
   .Caption = .filename.ustr() + ".gf"
}

