define {
   DESIGNING = 1
}
include {
   
   "..\\..\\lib\\vis\\app.g"
   "..\\..\\lib\\vis\\btn.g"
   "..\\..\\lib\\vis\\panel.g"
   "..\\..\\lib\\vis\\edit.g"
   "..\\..\\lib\\vis\\menu.g"
   "..\\..\\lib\\vis\\popupmenu.g"
   "..\\..\\lib\\vis\\tab.g"
   "..\\..\\lib\\vis\\combobox.g"
   "btnsys.g"
   "winedit.g"
   "proplist.g"
}
/*include {   
   "complib.g"
}*/
extern {
//func delcompdes(vComp comp)
func vComp newcompdes( uint typeid, vComp owner )
}
/*include {
   "form.g"
   "btn.g"
   "panel.g"   
   "winedit.g"
   "edit.g"   
//   "vCompman.g"
   "vPropList.g"
   "gt.ge"
   "btnsys.g"
   //"listbox.g"
   //"popuplist.g"
   "tab.g"
   "gena.g"
}*/

//FORMEDITOR SECTION START
//
type evdesc{
uint idmethod //Идентификатор метода
str  name     //Имя метода 
str  evtype   //Тип параметра сообщения
uint events //Количество подключенных компонентов
}

type myform <inherit=vForm>
{
   int cur
   //vPanel panleft
   //vPanel panowner
   vBtn bt_arrow
   vBtn bt_btn   
   vBtn bt_panel
   vBtn bt_edit   
   vBtn bsave
   vBtn bopen 
   vBtn babout 
   vEdit edcur
   
    vPanel panright 
    uint prl
    uint evl
    arr  evlist of evdesc 
    uint curidmethod
    
    str srcfile
    //arr  incllist
   //vBtn btn1
   //vBtn btn2
   //vBtn btn3
   //vBtn btn4
//USER DEFINED START
   //Здесь можно добавлять свои поля
//USER DEFINED STOP   
}


global
{ 
   myform myform1
   uint edform 
   uint wined
//   uint bthorz
//   uint btvert
//   uint ed_name
//   uint ed_cap
   uint inspm
   uint plist   
}
//FORMEDITOR SECTION END

method myform.btn1_click()
{   
 //  msg_info("Right Button click", "Test2")
   //this.btn1.x = 100
   //this.btn1.x = this.btn1.x + int(10)
   
   //newcomp( vForm, this )
/*SCROLLINFO sci
   sci.cbSize = sizeof( SCROLLINFO )
   sci.nPos = 10
   sci.fMask = 0x04 | 0x0001
   //sci.nTrackPos   
   SetScrollInfo( this.hwnd, 1, sci, 1) */
   ScrollWindowEx( this.hwnd, 100, 100, 0, 0, 0, 0, 1 )
}

method str myform.getnewname<result>( str vtypename )
{
   uint curn
   str typename 
   if *vtypename > 1 
   {
      typename.substr( vtypename, 1, *vtypename-1 )
   }
   else
   {
      typename = vtypename
   }
   do
   {
      result = typename + "\(curn++)"      
   }
   while &(edform->vComp.FindComp( result ))   
}

method str myform.getinclude <result> ()
{
   result = "include { \"complib.ge\"
\"btn.g\"
\"panel.g\"
\"edit.g\""
}

method str vCtrl.listctrl <result>
{  
   uint i
   fornum i=0, *this.ctrls
   {
      result@"\t"@this.ctrls[i]->vCtrl.TypeName@"\t"@this.ctrls[i]->vCtrl.Name@"\n"
      result@this.ctrls[i]->vCtrl.listctrl()
   }
}

method str myform.getform <result> ()
{
   result = "type v\(edform->vCtrl.Name) <inherit=vForm> {
\(edform->vCtrl.listctrl()) "
}


func uint replcode( str a, str b, str c)
{
return 1
}
func uint replcode( str a, str b, str c, str d)
{
return 1
}
func uint inscode( str a, str b, str c, str d)
{
return 1
}

method myform.setheader( str src )
{    
   src.read( this.srcfile + ".gf" )   
   if !replcode( src, "include", this.getinclude() ) : print( "ERROR\n" )   
   if !replcode( src, "form", this.getform() ) : print( "ERROR\n" )
   src.write( this.srcfile + ".gf" )
}

method myform.setheaderf()
{ 
   str src 
   src.read( this.srcfile + ".gf"  )
   this.setheader( src )
   src.write( this.srcfile + ".gf"  )
}  

method myform.setmethod( str src, str oldname, newname, typename )
{   
   str labo = "method \( oldname ) \( typename )"
   str labn = "method \( newname ) \( typename )"
   str code = "method uint v\(edform->vCtrl.Name).\(newname)( \(typename) evn )"      
   if !replcode( src, labo, labn, code )  
   {
      inscode( src, labn, code, "{\l\lreturn 0\l}\l" )
   }
}

method myform.setmethodf( str oldname, newname, typename )
{
   str src
   src.read( this.srcfile + ".gf" )   
   this.setmethod( src, oldname, newname, typename )
   src.write( this.srcfile + ".gf" )
}

method myform.setall
{
   str src
   src.read( this.srcfile + ".gf" )   
   
   this.setheader( src )
   /*fornum 
   {
      setmethod( ) 
   }*/
   src.write( this.srcfile + ".gf" )
}
 
method myform.setnew
{
   str src
   src@"/*	
 //!GFG и //!\\GFG  are commentary attributes generated by 
 the Gentee form editor. You should neither delete them 
 nor make any changes into the source code from the beginning 
 of the commentary attribute //!GFG to its end //!\\GFG
*/
"
   inscode( src, "include", this.getinclude(), "\l}\l" )
   inscode( src, "form", this.getform(), "\l}\l" )     
   src.write( this.srcfile + ".gf" )   
}

      
method vCtrl myform.newctrl( uint typeid )
{    
   uint b = &newcompdes( typeid, ?( wined->vVEEdit.winn, wined->vVEEdit.winn->vCtrl, edform->vCtrl ) )   
   b as vCtrl
   if &b
   {  
      b.HorzAlign = $alhLeft
      b.VertAlign = $alvTop      
      b.Name = this.getnewname( b.TypeName )
      this.setheaderf()      
   }
   return b
}

method myform.wineditnew( eventpos eu )
{    
   uint typeid 
   switch wined->vVEEdit.flgadd {
      case 1 : typeid = vBtn
      case 2 : typeid = vPanel
      case 3 : typeid = vEdit
   
   }
   uint b as this.newctrl( typeid )
   if &b
   {
      b.Left = eu.loc.left
      b.Top = eu.loc.top
      if eu.loc.width : b.Width = eu.loc.width
      if eu.loc.height : b.Height = eu.loc.height      
      switch wined->vVEEdit.flgadd {
      case 1 : b->vBtn.Caption = b.Name.ustr()
      case 2 : b->vPanel.Caption = b.Name.ustr()
      case 3 : b->vEdit.Text = b.Name.ustr() }
      this.bt_arrow.Checked = 1 
      wined->vVEEdit.select( b )
   }
   
   
 //  uint b as this.newctrl( vBtn )->vBtn
}

method myform.bt_btclick( eventn ev )
{
   uint b as this.newctrl( vBtn )->vBtn
   if &b
   {
      b.Caption = "btn".ustr()
   }
   wined->vVEEdit.select( b )   
}

method myform.bt_panclick(eventn ev)
{
   uint b as this.newctrl( vPanel )->vPanel
   if &b
   {
      b.Caption = "pan".ustr()
   }
   wined->vVEEdit.select( b )      
}

method myform.bt_edclick(eventn ev)
{
   uint b as this.newctrl( vEdit )->vEdit
   if &b
   {
      b.Text = "edit".ustr()
   }
   wined->vVEEdit.select( b )
}

method myform.bt_delclick(eventn ev)
{
   
   /*if wined->vVEEdit.winn && wined->vVEEdit.winn != edform
   {
      destroy( wined->vVEEdit.winn )
   }*/
}

method vCtrl.getproplist( arr ar of propl )
{     
   ar.clear()   
   uint c as cm.findcomp( this.pTypeId )
   if &c 
   {
      ar.expand( *c.props )     
      //ar[i].ptype
      uint i
      fornum i=0, *c.props
      {         
         ar[i].name=c.props[i].name
         ar[i].value = c.props[i].getval( this )
         if ar[i].value == c.props[i].defval
         {
            ar[i].ptype |= $PTYPE_DEFVAL
         }      
         if c.props[i].vals : ar[i].ptype |= $PTYPE_LIST   
      }      
   }  
}

method uint myform.finddesc( uint id )
{
   uint i
   fornum i, *this.evlist
   {
      if this.evlist[i].idmethod == id : return i
   }
   return -1
}

method uint myform.finddesc( str name, evtype )
{
   uint i
   fornum i, *this.evlist
   {
      if this.evlist[i].name == name &&
         this.evlist[i].evtype == evtype  : return i
   }
   return -1
}

method myform.geteventlist( vCtrl ctrl, arr ar of propl )
{
   ar.clear()   
   uint cd as cm.findcomp( ctrl.pTypeId )
   if &cd 
   {
      ar.expand( *cd.events )     
      uint i
      fornum i=0, *cd.events
      {         
         //print( "event+"+ cd.events[i].name+"\n" )
         ar[i].name=cd.events[i].name
         //uint evar as ctrl.des1->arr of uint
         uint idesc = this.finddesc( ctrl.des1->arr[i] )
         if idesc != -1
         {
            //print( "FIND \(i) \(idesc) \( this.evlist[idesc].name)\n" )
            ar[i].value = this.evlist[idesc].name
         }
      }      
   }
}

func vComp newcompdes( uint typeid, vComp owner )
{
   //print( "newcomp start \n" )
   uint comp as owner.CreateComp( typeid )
   if &comp
   {
      comp.p_designing = 1
      uint ar as new( arr )->arr
      /*ar.itype = str
      ar.isize = sizeof( str )*/
      uint cd as cm.findcomp(comp.pTypeId )
      if &cd 
      {         
         //print( " \(comp.typename) cd.events \( *cd.events ) \n" )
         ar.expand( *cd.events )
      }
      comp.des1 = &ar   
   }
   //print( "newcomp end \n" )
   return comp
}

/*func delcompdes(vComp comp)
{
   if comp.p_designing
   {     
      destroy( comp.des1 )       
      comp.delcomp()
   }     
}*/

method myform.ctrlselect( eventn ev )
{ 
   arr ar of propl
   //print( "SELECT\n" )
   wined->vVEEdit.winn->vCtrl.getproplist( ar )
   plist->vPropList.setar( ar )
   this.geteventlist( wined->vVEEdit.winn->vCtrl, ar )
   //wined->vVEEdit.winn->vCtrl.geteventlist( ar )
   this.evl->vPropList.setar( ar )
   this.edcur.Text = ( "     " + wined->vVEEdit.winn->vCtrl.TypeName + "     " + wined->vVEEdit.winn->vCtrl.Name ).ustr()    
}

method myform.ctrldelete( eventn ev )
{
   this.setheaderf()
}
/*
method myform.namekey()
{
   uint c as wined->vVEEdit.winn->vCtrl      
   c.name = ed_name->vEdit.txt
}
method myform.capkey()
{
   uint c as wined->vVEEdit.winn->vCtrl 
   //ed_name->vEdit.txt = c.name
   str cap = ed_cap->vEdit.txt
   switch c.typeid 
   {    
      case vPanel : c->vPanel.caption = cap
      case vBtn : c->vBtn.caption = cap
      case vEdit : c->vEdit.txt = cap
      default : cap=""
   } 
   
}
*/


method myform.propset( compDescr cd, vCtrl c, ustr name, value )
{ 
// uint cd as cm.findcomp(c.typeid )
   if &cd 
   {
      //print( "name =\(name)\n")
      //print( "value = \(value)\n" ) 
      uint p as cd.findprop(name.str())
      if p.typeid == uint || p.typeid == int
      {
         uint z = value.str().uint()    
         if p.vals
         {
            if p.findnameval( value.str(), &z) : p.addrset->func( &c, z)               
         }  
         else : p.addrset->func( &c, z)         
      }
      elif p.typeid == str
      {
         p.addrset->func( &c, value )
      }
   }
}


method myform.propset( eventprop ep )
{
   uint c as wined->vVEEdit.winn->vCtrl
   uint cd as cm.findcomp(c.pTypeId )
   if &cd 
   {
      this.propset( cd, c, ep.name, ep.value )
      /*
      uint p as cd.findprop(ep.name)
      if p.typeid == uint || p.typeid == int
      {
         uint z =str2int( ep.value )   
         if p.vals
         {
            if p.findnameval( ep.value, &z) : p.addrset->func( &c, z)
               
         }  
         else : p.addrset->func( &c, z)         
      }
      elif p.typeid == str
      {
         p.addrset->func( &c, ep.value )
      }*/   
      this.setheaderf()
      wined->vVEEdit.green()
      this.ctrlselect(ep)
   }   
}


method myform.eventset( compDescr cd, vCtrl c, ustr name, value, uint flgset )
{ 
// uint cd as cm.findcomp(c.typeid )
   if &cd && ( checkname( value.str() ) || !*value )
   {
      uint p = cd.findevent(name.str())
      uint i, finded
      if p != -1
      {
         //print( "eventset \(flgset) \(value)\n" )
       /*  
         uint evar as c.des1->arr of str  
         if evar[p]!= value*/
         uint id = c.des1->arr[p]
         uint idesc = this.finddesc( id )          
         uint idescnew
         if idesc == -1 
         {
            idescnew = this.finddesc( value.str(), cd.events[p].evtype )
            if idescnew == -1
            {               
               uint cur = *this.evlist
               this.evlist.expand( 1 )
               this.evlist[cur].idmethod = ++this.curidmethod
               this.evlist[cur].name = value
               this.evlist[cur].evtype = cd.events[p].evtype
               this.evlist[cur].events++
               c.des1->arr[p] = this.curidmethod
               //print( "1 ADD \(cur) \(this.curidmethod)\n" )
               if flgset : this.setmethodf( value.str(), value.str(), cd.events[p].evtype )
            }
            else
            {
               this.evlist[idescnew].events++
               c.des1->arr[p] = this.evlist[idescnew].idmethod
               //print( "2 FIND\n" )
            }
         }
         else
         {
            uint desc as this.evlist[idesc]
            if !*value
            {
               if !--desc.events
               {
                  this.evlist.del( idesc )                  
               }
               c.des1->arr[p] = 0
               //print( "3 DEL\n" )               
            }
            elif desc.name != value
            {               
               idescnew = this.finddesc( value.str(), cd.events[p].evtype )
               if idescnew == -1
               {                  
                  if flgset :this.setmethodf( desc.name, value.str(), cd.events[p].evtype )
                  desc.name = value
                 // print( "4 CHANGE\n" )                  
               }
               else
               {
                 // print( "5 REMOVE\n" )
                  if !--desc.events
                  {
                     this.evlist.del( idesc )                  
                  }                  
                  this.evlist[idescnew].events++
                  c.des1->arr[p] = this.evlist[idescnew].idmethod
               }
            }
         }
         /*|| desc[i].name != value
         {
            //if *evar[p]
            if &desc
            {
               descnew as this.finddesc( value, cd.events[p].evtype )
               if &descnew
               {
                  if !--desc.events
                  {
                     this.evlist.del(i)
                  }
               }
               /*fornum i, *this.evlist
               {
                  if this.evlist[i].name == evar[p] &&
                     this.evlist[i].evtype == cd.events[p].evtype
                  {  //Подключен уже существующий обработчик
                     
                     if *value
                     {
                        this.evlist[i].name = value
                     }
                     else
                     {
                        if !--this.evlist[i].events
                        {
                           this.evlist.del(i)
                        }
                     } 
                     finded = 1
                     break
                  }
               } 
            }
            else //Не был определен обработчик
            {                          
               fornum i, *this.evlist
               {
                  if this.evlist[i].name == value &&
                     this.evlist[i].evtype == cd.events[p].evtype
                  {  //Подключен уже существующий обработчик
                     this.evlist[i].events++
                     finded = 1
                     break
                  }
               }
               if !finded 
               {
                  uint cur = *this.evlist
                  this.evlist.expand( 1 )
                  this.evlist[cur].name = value
                  this.evlist[cur].evtype = cd.events[p].evtype
                  this.evlist[cur].events++
               }
            }
            evar[p] = value
         }*/
      }
   }
}

method myform.eventset( eventprop ep )
{
   uint c as wined->vVEEdit.winn->vCtrl
   uint cd as cm.findcomp(c.TypeId )
   if &cd 
   {  
      this.eventset( cd, c, ep.name, ep.value, 1 )
      /*uint p = cd.findevent(ep.name)
      if p != -1
      {
         uint evar as c.des1->arr of str               
         evar[p] = ep.value
      }      */
      this.ctrlselect(ep)
   }   
}

method uint myform.eventdblclick( eventn evn )
{
   //print( "dblclick\n" )
   uint c as wined->vVEEdit.winn->vCtrl
   uint cd as cm.findcomp(c.TypeId )
   uint ar as c.des1->arr of uint
   uint icur = this.evl->vPropList.ncur
   str evname
   if !ar[icur]
   {
      eventprop ep
      ep.name = cd.events[icur].name
      if *cd.events[icur].name > 2
      {
         evname.substr( cd.events[icur].name, 2, *cd.events[icur].name - 2 )
      }
      else : evname = cd.events[icur].name
      ep.value = c.Name + "_" + evname      
      this.eventset( ep )
   }
   return 0
}

method uint myform.getlist( eventn ev )
{
   uint c as wined->vVEEdit.winn->vCtrl
   uint cd as cm.findcomp(c.TypeId )
   if &cd 
   {      
      uint p as cd.findprop( this.prl->vPropList.ar[ this.prl->vPropList.ncur ].name.str() )
      if p.typeid == uint || p.typeid == int
      {            
         if p.vals
         {
//xxx            this.prl->vPropList.cb.loadfromarr( p.vals->arr of str )           
         }        
      }
   }   
   return 0
}


text formg ( str listge, fname, listctrl, listuser)
//GENTEE SECTION START
include {   
   \(listge)
}

type \(fname) <inherit = vForm>
{
\(listctrl)  
//USER SECTION START
   \(listuser)  
//USER SECTION END   
}
//GENTEE SECTION END
\!

method str str.quoted<result>
{
   uint i
   result.appendch( '"' )
   fornum i=0, *this
   {
      if this[i] == '\' || this[i] == '"'
      {
         result.appendch( '\' )
      }
      result.appendch( this[i] )     
   }
   result.appendch( '"' )
}
/*
method uint vForm.nextctrl( uint curctrl, uint plevel )
{
   uint owner
   uint ctrl as curctrl->vCtrl
   uint cidx 
    
   if !&ctrl
   {
      ctrl as this
      plevel->uint++
   }   
   elif *ctrl.ctrls
   {
      ctrl as ctrl.ctrls[0]->vCtrl
      plevel->uint++
   }
   else
   {         
      //print( "\(&owner)\n" )//.name )     
      while &ctrl != &this
      {         
         owner as ctrl.p_owner->vCtrl  
         cidx = ctrl.cidx + 1      
         if cidx < *owner.ctrls
         {
            ctrl as owner.ctrls[cidx]
            goto end
         } 
         ctrl as owner
         plevel->uint--
         //owner as ctrl.p_owner->vCtrl     
      }  
      ctrl as 0    
   }
label end
   return &ctrl
}
*/
method str vCtrl.listproperty <result>( str ownername, myform mf ) 
{  
   //uint x as inspm->vCompman
         
   uint i      
   if *ownername
   {
      result@"ctrl as this."@this.Name@"\n" 
      result@"ctrl.owner = "@ownername@"\n"
   }
   else : result@"ctrl as this\n" 

   uint c as cm.findcomp( this.TypeId )
   if &c 
   {
      fornum i=0, *c.props
      {    
         if c.props[i].getval(this) != c.props[i].defval
         {       
            if c.props[i].addrget
            {
               result@"ctrl."@c.props[i].name@"="
               //print( c.props[i].name+"\n" )             
               if c.props[i].typeid == str 
               {
                  result@(c.props[i].addrget->func( this,"" ))->str.quoted()     
               }
               elif c.props[i].typeid == uint || c.props[i].typeid == int
               {
                  str r
                  r.out4( "0x%X", (c.props[i].addrget->func( this ))) 
                  //print( r+"\n" )
                  result@r     
               }
               result@"\l"
            }
         }
      }
      uint arev as this.des1->arr of uint
      uint desc
      fornum i=0, *c.events
      {    
         if arev[i]
         {  
            desc as mf.evlist[mf.finddesc( arev[i] )] 
            result@"ctrl."@c.events[i].name@".set(this,\""@desc.name@"\")\l"
         }
      }
   }   
   fornum i=0, *this.ctrls
   {            
      result@this.ctrls[i]->vCtrl.listproperty(?(*ownername,"this."@this.Name, "this"), mf)      
   }
}

method str myform.listevents <result> ( str namef )
{  
   uint i
   fornum i, *this.evlist
   {
   result@
"method uint "@namef@"."@this.evlist[i].name@
"( "@this.evlist[i].evtype@" evn )
{

   return 0
}

"  
   } 
}
/*
method str myform.getmethevents<result>()
{  
   uint c as cm.findcomp( this.typeid )
   if &c
   uint arev as this.des1->arr of str
   fornum i=0, *c.events
   {    
      if *arev[i]
      {   
         result@"ctrl."@c.events[i].name@".set(this,\""@arev[i]@"\")\l"
      }
   }
   result = 
}
*/
method myform.build(eventn ev)
{           

   str listge = "\"complib.ge\""/*"\"app.g\"
\"btn.g\"
\"panel.g\"
\"edit.g\"*/
   
   str listctrl
   str listuser
   str namef=edform->vCtrl.Name
/*   
   (""@formg( listge, "v"@namef, edform->vCtrl.listctrl(), listuser )@this.listevents("v"@namef)).write( "test_a.g" )
*/   
   ("method v\(namef).compinit()
{
uint ctrl
this.p_typeid = v\(namef)
"@edform->vCtrl.listproperty( "", this )@"\n}\n").write(this.srcfile+".gi")
    
"include {
   \"\(this.srcfile).gf\"
   \"\(this.srcfile).gi\"}
global {
   v\(namef) \(namef)
}
func main<main>
{  
      
   \(namef).win()
   \(namef).compinit()   
   app.run( \(namef) )
}".write( this.srcfile+"_main.gw")
   //xxxshell( this.srcfile+"_main.gw")
   
}

method myform.save(eventn ev)
{
   uint ctrl 
   uint level, oldlevel
   uint i
   arr  ar of propl   
   str  frmtxt
   str  slevel
   arr  st[100] of uint
   
   while ctrl = edform->vForm.nextctrl( ctrl, &level, 0 ) 
   {
      for oldlevel, oldlevel >= level, oldlevel--
      {
         slevel = "  "
         slevel.repeat( oldlevel-1 )
         frmtxt@slevel@" </children>\n"@slevel@"</\(st[oldlevel]->vCtrl.Name)>\n"
      }  
      slevel = "  "
      slevel.repeat( level-1 )    
      ctrl as vCtrl      
      oldlevel = level
      st[level] = &ctrl
      //print( "\(&ctrl)\n" )//.name )
      ctrl.getproplist(ar)
      frmtxt@slevel@"<\(ctrl.Name) typename=\"\(ctrl.TypeName)\">\n"@slevel@" <properties>\n"
      fornum i = 0, *ar
      {         
         if ar[i].name != "name" && !(ar[i].ptype & $PTYPE_DEFVAL)
         {
            frmtxt@slevel@"  <\(ar[i].name)>\( ar[i].value)</\(ar[i].name)>\n"
         }         
      }
      frmtxt@slevel@" </properties>\n"@slevel@" <events>\n"
      this.geteventlist(ctrl,ar)
      fornum i = 0, *ar
      {         
         if *ar[i].value 
         {
            frmtxt@slevel@"  <\(ar[i].name)>\( ar[i].value)</\(ar[i].name)>\n"
         }         
      }
      frmtxt@slevel@" </events>\n"@slevel@" <children>\n"             
   }   
   for oldlevel, oldlevel >= level, oldlevel--
   {
      slevel = "  "
      slevel.repeat( oldlevel-1 )
      frmtxt@slevel@" </children>\n"@slevel@"</\(st[oldlevel]->vCtrl.Name)>\n"
   }
   frmtxt.write( this.srcfile+".frm" )  
}

method vCtrl myform.createobj(vCtrl owner, gtitem gi) 
{
/*xxx   gtitems gtis
   gtitems gtchis
   uint    ctrl
   str     typename
   uint    typeid
   str     val   
   uint    cd
   
   gi.getattrib( "typename", typename )
   //print( " \(gi.name()) \(typename)\n" )
   if *typename && ( typeid = getid( typename ) ) 
   {
      //print( typename )      
      ctrl = &newcompdes( typeid, owner )
      cd as cm.findcomp(typeid )
      ctrl->vCtrl.name = gi.name()      
      foreach gmi, gi.items(gtis)
      {
         if gmi.name() == "properties"
         {
            foreach gch, gmi.items(gtchis)
            {
               val.clear()               
               gch.get( val )               
               this.propset( cd, ctrl->vCtrl, gch.name(), val )           
            }
         }
         elif gmi.name() == "events"
         {
            foreach gch, gmi.items(gtchis)
            {
               val.clear()               
               gch.get( val )               
               this.eventset( cd, ctrl->vCtrl, gch.name(), val, 0 )           
            }
         }
         elif gmi.name() == "children"
         {
            foreach gch, gmi.items(gtchis)
            {
               this.createobj( ctrl->vCtrl, gch )
            }
         }
      }
   }   
   return ctrl->vCtrl*/ return 0->vCtrl  
}

/*
method myform.new()
{   
   if edform 
   {
      edform->vForm.delcomp()
   }
   this.evlist.clear()
   uint xwin as newcompdes( vForm, this.panright )->vCtrl
   edform = &xwin   
   xwin.name = this.getnewname( xwin->vForm.typename )
   xwin.p_designing = 1
   xwin.x =0
   xwin.y = 0
   xwin.width = 500
   xwin.height = 500
   //xwin.loc.x = 0
   //xwin.loc.y = 0
   SetWindowPos( edform->vForm.hwnd, 1, 0, 0, 0, 0, $SWP_NOMOVE | $SWP_NOSIZE | $SWP_NOACTIVATE )     
   wined->vVEEdit.select( edform->vCtrl )
   this.setnew()
}

method myform.new(eventn evn)
{
   this.new()   
}

method myform.load()
{
   gt fgt
   uint gti   
   gtitems gts    
   if !fileexist( this.srcfile+".frm" ) || !fgt.read( this.srcfile+".frm" )
   {
      this.new()
      return
   }    
   gti as fgt.root()
   if edform 
   {
      edform->vForm.delcomp()
   }
   this.evlist.clear()
   
   edform = &this.createobj( this.panright, gti.items(gts).first()->gtitem)
   
   SetWindowPos( edform->vForm.hwnd, 1, 0, 0, 0, 0, $SWP_NOSIZE | $SWP_NOACTIVATE )     
   wined->vVEEdit.select( edform->vCtrl )
}
*/
method myform.about(eventn evn)
{
 //  shell( "readme.txt" )
}

method myform.bt_arrowc(eventn ev)
{
   if this.bt_arrow.Checked : wined->vVEEdit.flgadd = 0
}
method myform.bt_btnc(eventn ev)
{  
   if this.bt_btn.Checked : wined->vVEEdit.flgadd = 1
}
method myform.bt_panelc(eventn ev)
{
   if this.bt_panel.Checked : wined->vVEEdit.flgadd = 2
}
method myform.bt_editc(eventn ev)
{
   if this.bt_edit.Checked : wined->vVEEdit.flgadd = 3
}


/*
include {
   "myform_ifrm.g"
}*/